import pygame
import requests

pygame.init()

HEIGHT, WIDTH = 550, 550
Color = (11, 2, 0)
WIN = pygame.display.set_mode((HEIGHT, WIDTH))
pygame.display.set_caption("Sudoku")
WHITE = (255, 255, 255)
buffer = 5
response = requests.get("https://sugoku.herokuapp.com/board?difficulty=easy")
grid = response.json()['board']
grid_original = [[grid[x][y] for y in range(len(grid[0]))] for x in range(len(grid))]
My_font = pygame.font.SysFont('Comic Sans MC', 35)


def insert(win, position):
    i, j = position[1], position[0]
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
            if event.type == pygame.KEYDOWN:
                if grid_original[i - 1][j - 1] != 0:
                    return
                if event.key == 48:
                    grid[i - 1][j - 1] = event.key - 48
                    pygame.draw.rect(WIN, WHITE,
                                     (position[0] * 50 + buffer, position[1] * 50 + buffer, 50 - buffer, 50 - buffer))
                    pygame.display.update()
                if 0 < event.key - 48 < 10:
                    pygame.draw.rect(WIN, WHITE,
                                     (position[0] * 50 + buffer, position[1] * 50 + buffer, 50 - buffer, 50 - buffer))
                    value = My_font.render(str(event.key - 48), True, (0, 0, 0))
                    win.blit(value, (position[0] * 50 + 15, position[1] * 50))
                    grid[i - 1][j - 1] = event.key - 48
                    pygame.display.update()
                return


def insert_in(win, position, v):
    # i, j = position[1], position[0]

    pygame.draw.rect(WIN, WHITE,
                     (position[0] * 50 + buffer, position[1] * 50 + buffer, 50 - buffer, 50 - buffer))
    value = My_font.render(str(v), True, (0, 0, 0))
    win.blit(value, (position[0] * 50 + 15, position[1] * 50))
    grid[position[1] - 1][position[0] - 1] = v
    pygame.display.update()


def draw_window():
    WIN.fill(WHITE)

    for i in range(0, 10):
        if i % 3 == 0:
            pygame.draw.line(WIN, (0, 0, 0), (50 + 50 * i, 50), (50 + 50 * i, 500), 4)
            pygame.draw.line(WIN, (0, 0, 0), (50, 50 + 50 * i), (500, 50 + 50 * i), 4)

        pygame.draw.line(WIN, (0, 0, 0), (50 + 50 * i, 50), (50 + 50 * i, 500), 2)
        pygame.draw.line(WIN, (0, 0, 0), (50, 50 + 50 * i), (500, 50 + 50 * i), 2)

    for i in range(0, len(grid[0])):
        for j in range(0, len(grid[0])):
            if 0 < grid[i][j] < 10:
                value = My_font.render(str(grid[i][j]), True, Color)
                WIN.blit(value, ((j + 1) * 50 + 20, (i + 1) * 50 + 15))
    pygame.display.update()


def main():
    run = True
    while run:

        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
                pos = pygame.mouse.get_pos()
                insert(WIN, (pos[0] // 50, pos[1] // 50))
            if event.type == pygame.QUIT:
                run = False
        draw_window()
    for i in range(0, len(grid)):
        print(grid[i], grid_original[i])
    pygame.quit()


# ////
# ////


def has_dupes(list):
    for i in range(1, 10):
        if list.count(i) <= 1:
            continue
        else:
            return True
    return False


def flip_board(board):
    l = []
    for i in range(len(board)):
        l.append([board[t][i] for t in range(len(board))])
    return l


def block_board(board):
    inc = [0, 3, 6]
    new_board = [[] for _ in range(9)]
    index_1 = 0
    index_2 = 0
    for p in range(9):
        if p % 3 == 0 and not p == 0:
            index_2 = 0
            index_1 += 3
        for t in range(3):
            for i in range(3):
                new_board[p].append(board[index_1 + t][index_2 + i])
        index_2 += 3
    return new_board


def is_valid(board):
    l = len(board)
    for t in range(l):
        if has_dupes(board[t]):
            print('rows')
            return False
        elif has_dupes(flip_board(board)[t]):
            print('columns')
            return False
        elif has_dupes(block_board(board)[t]):
            print('blocks')
            return False
    return True


def not_in_row(n, k):
    uncommon = []
    for i in range(len(n)):
        if n[i] not in k:
            uncommon.append(n[i])
    return uncommon


def whats_empty(board):
    new_list = []
    for i in range(0, 9):
        for j in range(0, 9):
            if board[i][j] == 0:
                new_list.append([i, j])

    return new_list


def whats_possible(board, l):
    n_list = []
    flipped = flip_board(board)
    blocked = block_board(board)
    for i in l:
        number_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        number_list = not_in_row(number_list, board[i[0]])
        number_list = not_in_row(number_list, flipped[i[1]])
        if i[0] < 3:
            index = i[1] // 3
        elif i[0] < 6:
            index = 3 + i[1] // 3
        elif i[0] < 9:
            index = 6 + i[1] // 3
        number_list = not_in_row(number_list, blocked[index])
        n_list.append(number_list)
    return n_list


def find_empty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return i, j  # row, col

    return None


def valid(board, num, pos):
    # Check row
    for i in range(len(board[0])):
        if board[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False

    return True


def solve(board):
    find = find_empty(board)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1, 10):
        if valid(board, i, (row, col)):
            board[row][col] = i
           
            if solve(board):
                return True

            board[row][col] = 0

    return False


# print(whats_empty(grid))
# print(whats_possible(grid, whats_empty(grid)))
# print(block_board(grid))
solve(grid)
print(is_valid(grid))
if __name__ == "__main__":
    main()
